{
  "name": "db.js",
  "description": "db.js is a wrapper for IndexedDB to make it easier to work against, making it look more like a queryable API.",
  "version": "0.11.0",
  "homepage": "http://aaronpowell.github.com/db.js/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aaronpowell/db.js.git"
  },
  "bugs": {
    "url": "https://github.com/aaronpowell/db.js/issues"
  },
  "license": "MIT",
  "main": "dist/db.min.js",
  "engines": {
    "node": ">=0.8"
  },
  "scripts": {
    "test": "grunt test",
    "prepublish": "bower install"
  },
  "devDependencies": {
    "babel-preset-es2015": "^6.0.15",
    "eslint-config-standard": "^4.4.0",
    "eslint-plugin-standard": "^1.3.1",
    "express": "*",
    "grunt": "~0.4.1",
    "grunt-babel": "^6.0.0",
    "grunt-contrib-clean": "~0.4.1",
    "grunt-contrib-connect": "^0.9.0",
    "grunt-contrib-jade": "~0.5.1",
    "grunt-contrib-uglify": "^0.10.0",
    "grunt-eslint": "^17.3.1",
    "grunt-saucelabs": "^8.6.0",
    "jade": "*",
    "matchdep": "~0.1.2"
  },
  "keywords": [
    "indexeddb"
  ],
  "readme": "[![Build Status](https://travis-ci.org/aaronpowell/db.js.png?branch=master)](https://travis-ci.org/aaronpowell/db.js)[![Selenium Test Status](https://saucelabs.com/buildstatus/aaronpowell)](https://saucelabs.com/u/aaronpowell)\n\n# db.js\n\ndb.js is a wrapper for [IndexedDB](http://www.w3.org/TR/IndexedDB/) to\nmake it easier to work against, making it look more like a queryable API.\n\n# Usage\n\nAdd a reference to db.js in your application before you want to use IndexedDB:\n\n```html\n\t<script src='/scripts/db.js'></script>\n```\n\nAlternatively, db.js includes an optional `define` call, and can be loaded\nas module using the [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD)\nloader of your choice.\n\nOnce you have the script included you can then open connections to each\ndifferent database within your application:\n\n```js\n\tvar server;\n\tdb.open( {\n\t    server: 'my-app',\n\t    version: 1,\n\t    schema: {\n\t        people: {\n\t            key: { keyPath: 'id' , autoIncrement: true },\n\t            // Optionally add indexes\n\t            indexes: {\n\t                firstName: { },\n\t                answer: { unique: true }\n\t            }\n\t        }\n\t    }\n\t} ).then( function ( s ) {\n\t    server = s\n\t} );\n```\n\nA connection is intended to be persisted, and you can perform multiple\noperations while it's kept open. Check out the `/tests/specs` folder\nfor more examples.\n\n## General\n\nNote that the methods below can be called either as\n`server.people.xxx( arg1, arg2, ... )` or\n`server.xxx( 'people', arg1, arg2, ... )`.\n\n## Adding items\n\n```js\n\tserver.people.add( {\n\t    firstName: 'Aaron',\n\t    lastName: 'Powell',\n\t    answer: 42\n\t} ).then( function ( item ) {\n\t    // item stored\n\t} );\n```\n\n## Removing\n\n```js\n\tserver.people.remove( 1 ).then( function ( key ) {\n\t    // item removed\n\t} );\n```\n\n### Clearing\nThis allows removing all items in a table/collection:\n\n```js\nserver.people.clear()\n    .then(function() {\n        // all table data is gone.\n    })\n```\n\n## Fetching\n\n### Getting a single object by ID\n\n```js\n\tserver.people.query( 'firstName' , 'Aaron' )\n\t      .execute()\n\t      .then( function ( results ) {\n\t          // do something with the results\n\t      } );\n```\n\n### Querying all objects, with optional filtering\n\n```js\n\tserver.people.query()\n\t      .filter( 'firstName', 'Aaron' )\n\t      .execute()\n\t      .then( function ( results ) {\n\t          // do something with the results\n\t      } );\n```\n\n### Filter with function\n\n```js\n\tserver.people.query()\n\t      .filter( function(person){ return person.group == 'hipster' } )\n\t      .execute()\n\t      .then( function ( results ) {\n\t          // do something with the results\n\t      } );\n```\n\n### Querying using indexes\n\nAll ranges supported by IDBKeyRange can be used.\n\n```js\n\tserver.people.query( 'firstName' )\n\t      .only( 'Aaron' )\n\t      .then( function ( results ) {\n\t          //do something with the results\n\t      } );\n\n\tserver.people.query( 'indexName' )\n\t      .bound( 'answer', 30, 50 )\n\t      .then( function ( results ) {\n\t          //do something with the results\n\t      } );\n```\n\n### Atomic updates\n\nAny query that returns a range of results can also be set to modify the returned\nrecords automatically. This is done by adding `.modify()` at the end of the query\n(right before `.execute()`).\n\n`modify` only runs updates on objects matched by the query, and still returns\nthe same results to the `done()` function (however, the results will have the\nmodifications applied to them).\n\nExamples:\n\n```js\n// grab all users modified in the last 10 seconds,\nserver.users.query('last_mod')\n    .lowerBound(new Date().getTime() - 10000)\n    .modify({last_mod: new Date.getTime()})\n    .execute()\n    .then(function(results) {\n        // now we have a list of recently modified users\n    });\n\n// grab all changed records and atomically set them as unchanged\nserver.users.query('changed')\n    .only(true)\n    .modify({changed: false})\n    .execute()\n    .then(...)\n\n// use a function to update the results. the function is passed the original\n// (unmodified) record, which allows us to update the data based on the record\n// itself.\nserver.profiles.query('name')\n    .lowerBound('marcy')\n    .modify({views: function(profile) { return profile.views + 1; }})\n    .execute()\n    .then(...)\n\n```\n\n`modify` can be used after: `all`, `filter`, `desc`, `distinct`, `only`,\n`bound`, `upperBound`, or `lowerBound`.\n\n## Closing connection\n\n```js\n\tserver.close();\n```\n\n# Deferred/Promise notes\n\ndb.js used the es6 Promise spec to handle asynchronous operations.\n\nAll operations that are asynchronous will return an instance of the\nes6 Promise object that exposes a `then` method which will take up\nto two callbacks, `onFulfilled` and `onRejected`. Please refer to\nes6 promise spec for more information.\n\nAs of version `0.7.0` db.js's Promise API is designed to work with\nes6 Promises, please polyfill it if you would like to use other promise\nlibrary.\n\n# Contributor notes\n\n- `npm install` to install all the dependencies\n\n- `grunt jasmine-server` to run the jasmine server\n\n- Open `http://localhost:9999/tests` to run the jasmine tests\n\nThe MIT License\n\nCopyright (c) 2012 Aaron Powell\n",
  "readmeFilename": "README.md",
  "_id": "db.js@0.11.0",
  "_shasum": "aaa8ba9ee89638a92bba76f93d513003f0cd4443",
  "_resolved": "git+https://github.com/aaronpowell/db.js.git#4ccde49d7e28eee752db1e428a83740de26e2f7e",
  "_from": "db.js@git+https://github.com/aaronpowell/db.js.git#4ccde49d7e28eee752db1e428a83740de26e2f7e"
}
